[
{
	"uri": "https://docs.lunchbadger.com/basics/git-access/",
	"title": "Git Access",
	"tags": [],
	"description": "",
	"content": "LunchBadger provide 2 GIT repositories containing your code. First is the repo for code containing all models. git clone git@git.lunchbadger.com:customer-{your user id}/dev.git The Second contains code of functions git clone git@git.lunchbadger.com:customer-{your user id}/functions.git\nTo access the repos you need to upload your public SSH key first. Press setting cog icon in the top right corner of the App.\nYou should see settings page; scroll down to see: Note the git URL is shown in Access via Git section\nPress + icon to add new SSH key To copy your public SSH key into clipboard use\npbcopy \u0026lt; ~/.ssh/id_rsa.pub  Paste content into Key field and add some label to identify the key in future and press the Uploadbutton\nnow just git clone ...\n"
},
{
	"uri": "https://docs.lunchbadger.com/basics/entity-palette/api-endpoints/",
	"title": "API Endpoints",
	"tags": [],
	"description": "",
	"content": "Used as Express Gateway API Endpoints for clients connecting to Gateway Entities.\n"
},
{
	"uri": "https://docs.lunchbadger.com/basics/entity-palette/gateways/",
	"title": "Gateways",
	"tags": [],
	"description": "",
	"content": " Clicking this icon creates a new Gateway Entity on the canvas with a corresponding Gateway Deployment running in Kubernetes.\nExample:\nEach Gateway consists of one or more Pipelines. Model, Service Endpoint, and Function Entities can all be connected to the left-hand side of a Pipeline. API Endpoint Entities connect to the right-hand side of a Pipeline.\nPipelines contain a list of Policies. Policies contain a list of condition-action pairs.\nExample:\nMore details on available conditions and policies can be found in the Express Gateway Documentation.\nAccessing Gateway Instances All gateways will be accessible via the following domain name pattern:\nhttp://{gateway-name}-{user-id}-dev.lunchbadger.io\nFor example, if your gateway is named \u0026ldquo;Gateway\u0026rdquo; and your User ID is \u0026ldquo;999\u0026rdquo;, your gateway will be accessible at:\nhttp://gateway-999-dev.lunchbadger.io\nConsumer Management All Gateway Entities contain an icon for accessing Consumer Management. Create User\\Apps\\Scopes buy pressing plus + icon Create credentials by clicking on row with user or app Please refer to Express Gateway Consumer Management for more information\n"
},
{
	"uri": "https://docs.lunchbadger.com/basics/entity-palette/data-sources/",
	"title": "Data Sources",
	"tags": [],
	"description": "",
	"content": "Each data source entity will come with its own set of properties specific for that type of connection.\nThese entities correspond with a matching data source connector that can be used with your underlying Loopback project.\n Memory REST SOAP MongoDB Redis MySQL PostgreSQL Etherum Salesforce Triton Object Storage  "
},
{
	"uri": "https://docs.lunchbadger.com/basics/entity-palette/functions/",
	"title": "Functions",
	"tags": [],
	"description": "",
	"content": "Function Entities A function entity represents a serverless function that runs in your Kubernetes cluster. LunchBadger includes a built-in editor.\nDuring beta, functions can be created in Node.JS 6 and Python 2.7\nExample: for Node.JS version function editor will look like\nhandler.js is the file with main entry point. you can create another files and reference them\npackage.json contains node.js package dependencies. LunchBadger will install them during function launch.\nCode is stored in git repo. See Git Access for details.\n"
},
{
	"uri": "https://docs.lunchbadger.com/basics/entity-palette/models/",
	"title": "Models",
	"tags": [],
	"description": "",
	"content": " Model Entity represent a visual interface on top of a Loopback Model. Here, you can add properties you\u0026rsquo;d like to expose from your Data Source through your API Endpoint.\nYou can define properties of the model directly in the Model box on Canvas. Press Quick Edit button on the model to enter this mode. Or use full version of editor with access to Loopback Model code Publishing model Once model connected to a datasource it will automatically generate Swagger\\OpenAPIv2 spec and corresponding fully functional endpoints.\nThe url to access available in the Settings menu Visit the .../explorer to try out API "
},
{
	"uri": "https://docs.lunchbadger.com/basics/canvas/",
	"title": "Canvas",
	"tags": [],
	"description": "",
	"content": " The LunchBadger platform Canvas is a single pane of glass where you can design, build and create your microservices and APIs.\n The Canvas is divided into the following columns: Entity Palette Left most Menu. This is the toolbox for creation all LunchBadger Entities More Details: Entity Palette\nBackend: TODO: why name is backend instead of Data Sources Shows all Data Sources available to Models. You can define database connection details for your Models\nPrivate: The section contain all models, service endpoints and functions in your system. They are not exposed publically, but can communicate with each other. In LunchBadger communication with external services is done through the Gateway\nGateway: Hosted Express-Gateway that provides routing, authentication, authorization, rate-limiting etc. for private endpoints More details about Gateways\nPublic: A section for Api Endpoints. They define how incoming(ingress) traffic is routed to the Gateways\n"
},
{
	"uri": "https://docs.lunchbadger.com/basics/entity-palette/",
	"title": "Entity Palette",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lunchbadger.com/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lunchbadger.com/demo/",
	"title": "Demo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lunchbadger.com/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lunchbadger.com/",
	"title": "HOME",
	"tags": [],
	"description": "",
	"content": " LunchBadger Documentation Welcome to LunchBadger! Documentation for LunchBadger is provided on [name platform or how it is written. Ex. “written in Markdown”] or sign up for a private demo.\nOpen Source Technology Used in LunchBadger LunchBadger Canvas Objects are wired into elements of open source software. Source-level access to these components provides opportunities in portability and environment-specific testing. Here are some projects used behind the scenes and integrated into LunchBadger:\n Express Gateway - Provides advanced gateway features using Service Endpoint, Gateway, and API Endpoint Objects. Loopback - Provides features of Data Source and Model Objects. Kubernetes - Provides advanced container orchestration. Serverless - Acts as an adapter for Function-as-a-Service (FaaS) platforms. Kubeless - A FaaS solution that\u0026rsquo;s native to Kubernetes. This project powers LunchBadger\u0026rsquo;s out-of-the-box serverless platform.  Interested in our open source project, Express Gateway? If you’d like to contribute, please see our Github website repo or you can join our Community on Gitter. [Commercial Support options are also available for Express Gateway. ] [ Link to support page when ready]\nNeed Support? Now that you\u0026rsquo;re armed with the basics of how to use LunchBadger, have fun! Feel free to play around with Entities on the Canvas and direct any questions to your LunchBadger Support Team at hello@lunchbadger.com.\n"
},
{
	"uri": "https://docs.lunchbadger.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.lunchbadger.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]