<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Featured on Express Serverless Platform</title>
    <link>https://express-serverless.io/categories/featured/</link>
    <description>Recent content in Featured on Express Serverless Platform</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Nov 2018 01:08:42 +0000</lastBuildDate>
    
	<atom:link href="https://express-serverless.io/categories/featured/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ESP vs AWS Lambda</title>
      <link>https://express-serverless.io/blog/microservices-platform-comparison-express-serverless-on-aws-vs-lambda/</link>
      <pubDate>Thu, 29 Nov 2018 01:08:42 +0000</pubDate>
      
      <guid>https://express-serverless.io/blog/microservices-platform-comparison-express-serverless-on-aws-vs-lambda/</guid>
      <description>Developer Challenges of Serverless and AWS AWS pioneered the idea behind serverless when they introduced AWS Lambda: focus on your business logic down to its atomic parts of your applications—functions—and let them worry about the rest. This whole idea eventually led to the NoOps movement.
&amp;nbsp;
Serverless is a great idea! It&amp;#8217;s a new paradigm that can be applied to how modern applications are developed and run in the cloud to drastically increase developer focus and productivity.</description>
    </item>
    
    <item>
      <title>How To Get Started with API Management and Express Serverless Platform</title>
      <link>https://express-serverless.io/blog/get-started-api-management-express-serverless-platform/</link>
      <pubDate>Mon, 05 Nov 2018 12:21:22 +0000</pubDate>
      
      <guid>https://express-serverless.io/blog/get-started-api-management-express-serverless-platform/</guid>
      <description>In our last post, we discussed API Management and the key role that an API Gateway could play. API Gateways can enable secure access to its API endpoints. Features in an API Gateway are often categorized in three broad categories:
 Authentication: Who is allowed to access (Access Control) Authorization: Who is allowed to perform operations of exposed APIs (Permissions / Privileges) Audit: Analyzing sufficient information for each client request   How does this work?</description>
    </item>
    
    <item>
      <title>API Management - Setting Up Key-Based Authentication</title>
      <link>https://express-serverless.io/blog/api-management-setting-up-key-based-authentication-with-express-serverless-platform/</link>
      <pubDate>Thu, 08 Nov 2018 09:09:25 +0000</pubDate>
      
      <guid>https://express-serverless.io/blog/api-management-setting-up-key-based-authentication-with-express-serverless-platform/</guid>
      <description>We&amp;#8217;ve discussed API Management and setting up the Service and API Endpoints. As long time champions of all the ways you could be using an API Gateway, we&amp;#8217;re going to walk through how take the next step with API Management and set up your Authentication.
To recap, features in an API Gateway are often categorized in three broad categories:
 Authentication: Who is allowed to access (Access Control) Authorization: Who is allowed to perform operations of exposed APIs (Permissions / Privileges) Audit: Analyzing sufficient information for each client request   Here&amp;#8217;s a quick diagram of what that looks like:</description>
    </item>
    
    <item>
      <title>API Management Reimagined: Authentication Authorization Audit</title>
      <link>https://express-serverless.io/blog/api-management-authentication-authorization-audit/</link>
      <pubDate>Tue, 16 Oct 2018 21:06:48 +0000</pubDate>
      
      <guid>https://express-serverless.io/blog/api-management-authentication-authorization-audit/</guid>
      <description>Authentication Authorization And Audit: The Operations Perspective API Gateways provide a set of features that enable secure access to its API endpoints. These features fall under three broad categories:
 Authentication: Who is allowed to access the API Gateway at all? (Access Control) Authorization: Who is allowed to perform a certain operation using exposed APIs (Permissions / Privileges) Audit: Capturing sufficient information for each client request to be able to detect and possibly prevent malicious activity  An administrator of any API Gateway platform need to be aware of these capabilities, which could be a bit different compared to securing web sites and databases.</description>
    </item>
    
    <item>
      <title>Leveraging Kubernetes For Microservices Based Cloud Strategy</title>
      <link>https://express-serverless.io/blog/kubernetes-scalability/</link>
      <pubDate>Mon, 13 Aug 2018 19:26:15 +0000</pubDate>
      
      <guid>https://express-serverless.io/blog/kubernetes-scalability/</guid>
      <description>Enterprise applications have to be designed upfront for scalability and change. This has significant implications for both application architecture and application infrastructure. Application architecture is evolving from unmanageable monolithic or three-tier patterns to interconnected microservices. Microservices introduce new form factors not only for functionality and team-size (the so-called two-pizza teams), but also for the unit of infrastructure. It is not surprising that a portable container or a pod of handful interrelated containers often works out as the most befitting unit of infrastructure for microservices-based architecture.</description>
    </item>
    
  </channel>
</rss>